ggplot(b, aes(x = V1, y = classn))+
geom_point(position = "jitter", alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm)
ggplot(b, aes(x = V1, y = classn))+
geom_point( alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm)
b
ggplot(b, aes(x = V1, y = classn))+
geom_point( alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm(family = binomial))
ggplot(b, aes(x = V1, y = classn))+
geom_point( alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm(family = "binomial"))
ggplot(b, aes(x = V1, y = classn))+
geom_point( alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm(classn~V1, family = "binomial"))
ggplot(b, aes(x = V1, y = classn))+
geom_point( alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm(data = b, classn~V1, family = "binomial"))
ggplot(b, aes(x = V1, y = classn))+
geom_point( alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm, formula = V1~classn)
sps <- ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point() +
scale_colour_brewer(palette="Set1")
sps + geom_smooth()
sps + geom_smooth(method = lm, se = F, fullrange = T)
sps + geom_smooth(method = lm, se = F, fullrange = F)
sps + geom_smooth(method = lm, se = F, fullrange = T)
sps + geom_smooth(method = lm, se = F, fullrange = F)
model <- lm(heightIn ~ ageYear + I(ageYear^2), heightweight)
xmin <- min(heightweight$ageYear)
xmax <- max(heightweight$ageYear)
predicted <- data.frame(ageYear=seq(xmin, xmax, length.out=100))
predicted
predicted$heightIn <- predict(model, predicted)
ggplot(predicted, aes(x = ageYear, y =heightIn))+
geom_point()
predictvals <- function(model, xvar, yvar, xrange=NULL, samples=100, ...) {
# If xrange isn't passed in, determine xrange from the models.
# Different ways of extracting the x range, depending on model type
if (is.null(xrange)) {
if (any(class(model) %in% c("lm", "glm")))
xrange <- range(model$model[[xvar]])
else if (any(class(model) %in% "loess"))
xrange <- range(model$x)
}
newdata <- data.frame(x = seq(xrange[1], xrange[2], length.out = samples))
names(newdata) <- xvar
newdata[[yvar]] <- predict(model, newdata = newdata, ...)
newdata
}
modlinear <- lm(heightIn ~ ageYear, heightweight)
modloess <- loess(heightIn ~ ageYear, heightweight)
lm_predicted <- predictvals(modlinear, "ageYear", "heightIn")
loess_predicted <- predictvals(modloess, "ageYear", "heightIn")
lm_predicted
sp
sp + geom_line(data=lm_predicted, colour="red", size=.8) +
sp + geom_line(data=lm_predicted, colour="red", size=.8) +
geom_line(data=loess_predicted, colour="blue", size=.8)
sp + geom_line(data=lm_predicted, colour="red", size=.8) +
geom_line(data=loess_predicted, colour="blue", size=.8)
sp + geom_line(data=lm_predicted, colour="red", size=.8) +
geom_line(data=loess_predicted, colour="blue", size=.8)
sp <- ggplot(heightweight, aes(x=ageYear, y=heightIn)) +
geom_point(colour="grey40")
predictvals <- function(model, xvar, yvar, xrange=NULL, samples=100, ...) {
# If xrange isn't passed in, determine xrange from the models.
# Different ways of extracting the x range, depending on model type
if (is.null(xrange)) {
if (any(class(model) %in% c("lm", "glm")))
xrange <- range(model$model[[xvar]])
else if (any(class(model) %in% "loess"))
xrange <- range(model$x)
}
newdata <- data.frame(x = seq(xrange[1], xrange[2], length.out = samples))
names(newdata) <- xvar
newdata[[yvar]] <- predict(model, newdata = newdata, ...)
newdata
}
modlinear <- lm(heightIn ~ ageYear, heightweight)
modloess <- loess(heightIn ~ ageYear, heightweight)
lm_predicted <- predictvals(modlinear, "ageYear", "heightIn")
loess_predicted <- predictvals(modloess, "ageYear", "heightIn")
sp + geom_line(data=lm_predicted, colour="red", size=.8) +
geom_line(data=loess_predicted, colour="blue", size=.8)
modlinear$model
modlinear$model[["ageYear"]]
range(modlinear$model[["ageYear"]])
ggplot(b, aes(x = V1, y = classn))+
geom_point( alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm, family = binomial)
fitlogistic <- glm(classn ~ V1, b, family=binomial)
glm_predicted <- predictvals(fitlogistic, "V1", "classn", type="response")
ggplot(b, aes(x=V1, y=classn)) +
geom_point(position=position_jitter(width=.3, height=.08), alpha=0.4,
shape=21, size=1.5) +
geom_line(data=glm_predicted, colour="#1177FF", size=1)
ggplot(b, aes(x = V1, y = classn))+
geom_point(position = position_jitter(.5,.01), alpha = .4,
shape = 21, size = 1.5)+
stat_smooth(method=glm)
ggplot(b, aes(x=V1, y=classn)) +
geom_point(position=position_jitter(width=.3, height=.08), alpha=0.4,
shape=21, size=1.5) +
geom_line(data=glm_predicted, colour="#1177FF", size=1)
glm_predicted <- predictvals(fitlogistic, "V1", "classn")
ggplot(b, aes(x=V1, y=classn)) +
geom_point(position=position_jitter(width=.3, height=.08), alpha=0.4,
shape=21, size=1.5) +
geom_line(data=glm_predicted, colour="#1177FF", size=1)
glm_predicted$classn
glm_predicted <- predictvals(fitlogistic, "V1", "classn", type = "response")
glm_predicted$classn
knitr::opts_chunk$set(echo = TRUE)
require(readr)
require(broom); require(dplyr)
require(glmnet)
require(dplyr)
require(glmnet)
library(broom)
pcancer <- read_delim(http://www- stat.stanford.edu/~hastie/ElemStatLearn/datasets/p rostate.data, "\t", escape_double = FALSE, trim_ws = TRUE)
pcancer <- read_delim(http://www-stat.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data, "\t", escape_double = FALSE, trim_ws = TRUE)
pcancer <- read_delim(http://www-stat.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data,"\t", escape_double = FALSE, trim_ws = TRUE)
pcancer <- read_table("/Users/linyuxiang/Desktop/多變量/Data/prostate.data.txt")
View(pcancer)
pcancer <- read_table("/Users/linyuxiang/Desktop/多變量/Data/prostate.data.txt", "\t")
View(pcancer)
.
View(pcancer)
pcancer <- read_delim(http://www-stat.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data, "\t", escape_double = FALSE, trim_ws = TRUE)
pcancer <- read_delim(http:/www-stat.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data, "\t", escape_double = FALSE, trim_ws = TRUE)
pcancer <- read_delim(http:www-stat.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data, "\t", escape_double = FALSE, trim_ws = TRUE)
pcancer <- read_delim(www-stat.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data, "\t", escape_double = FALSE, trim_ws = TRUE)
pcancer <- read_delim("http://www-stat.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data", "\t", escape_double = FALSE, trim_ws = TRUE)
View(pcancer)
str(pcancer)
pr.train <- pcancer[which(pcancer$train),2:10]
pr.test <- pcancer[-which(pcancer$train), 2:10]
pairs(pr.train[,1:9], pch=19, cex=.25)
round(cor(pr.train[,1:9]),3)
pr.ls <- lm(lpsa ~ ., data=pr.train) p summary(pr.ls)$coef
pr.ls <- lm(lpsa ~ ., data=pr.train)
summary(pr.ls)$coef
summary(pr.ls)
pr.fwd <- step(lm(lpsa ~ 1, data=pr.train),~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45,data=pr.train, direction="forward")
pr.fwd <- step(lm(lpsa ~ 2, data=pr.train),~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45,data=pr.train, direction="forward")
pr.fwd <- step(lm(lpsa ~ 1, data=pr.train),~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45,data=pr.train, direction="forward")
lm(lpsa~ lcavol + lweight + svi + lbph, data - pr.train)
lm(lpsa~ lcavol + lweight + svi + lbph, data = pr.train)
lm(lpsa~ lcavol + lweight + svi + lbph, data = pr.train) %>% summary
pr.bwd <- step(data = pr.ls, direction = "backward")
pr.bwd <- step( pr.ls, direction = "backward")
lm(lpsa~1)
lm(lpsa~1, data = pr.train)
lm(lpsa~, data = pr.train)
lm(lpsa, data = pr.train)
lm(lpsa~0, data = pr.train)
lm(lpsa~1, data = pr.train)
library("ElemStatLearn")
install.packages("ElemStatLearn")
pcancer$svi
pcancer$svi <- factor(pcancer$svi)
pcancer$gleason <- factor(pcancer$gleason)
lm(data = pcancer, lpsa~.)
lm(data = pcancer, lpsa~.) %>% summary
lm(data = pcancer, log(lpsa)~.) %>% summary
lm(data = pcancer, lpsa~.) %>% summary
lm(data = pcancer, log(lpsa)~.) %>% summary
library(leaps)
install.packages("leaps")
library(leaps)
regsubsets(lpsa~., data = pcancer, intercept = T, method = "exhaustive")
regsubsets(lpsa~., data = pcancer, intercept = T, method = "exhaustive") %>% summary
regsubsets(lpsa~., data = pcancer, intercept = T, method = "exhaustive") %>% summary$adjr2
fit <- regsubsets(lpsa~., data = pcancer, intercept = T, method = "exhaustive")
summary(fit)$adjr2
fit <- lm(lpsa ~ lcavol + lweight + svi, data = pcancer)
plot(fit)
corr(pcancer$lcavol,pcancer$lweight)
cor(pcancer$lcavol,pcancer$lweight)
cor(pcancer$lcavol,pcancer$lweight,pcancer$age)
cor(pcancer[,2:4])
cor(pcancer[,2:])
cor(pcancer[,2:5])
cor(pcancer[,2:7])
cor(pcancer[,2:6])
pcancer[,6]
pcancer$svi <- numeric(pcancer$svi)
pcancer$svi <- as.numeric(pcancer$svi)
pcancer$gleason <- as.numeric(pcancer$gleason)
cor(pcancer[,2:9])
lm(data = pcancer, lpsa~.) %>% summary
names(pcancer)
my_data <- pcancer[2:10]
lm(data = my_data, lpsa~.) %>% summary
lm(data = my_data, log(lpsa)~.) %>% summary
fit <- regsubsets(lpsa~., data = my_data, intercept = T, method = "exhaustive")
summary(fit)$adjr2
lm(data = my_data, log(lpsa)~.) %>% summary
my_data$gleason <- factor(my_data$gleason)
lm(data = my_data, log(lpsa)~.) %>% summary
View(my_data)
View(pcancer)
pcancer <- read_delim("http://www-stat.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data", "\t", escape_double = FALSE, trim_ws = TRUE)
View(pcancer)
my_data <- pcancer[2:10]
my_data$gleason <- factor(my_data$gleason)
View(my_data)
lm(data = my_data, log(lpsa)~.) %>% summary
fit
fit <- regsubsets(lpsa~., data = my_data, intercept = T, method = "exhaustive")
fit
fit %>% summary
summary(fit)$adjr2
make_model <- function(data) {
lm(heightIn ~ ageYear, data)
}
models <- dlply(heightweight, "sex", .fun = make_model)
model
models$f
models$m
predvals <- ldply(models, .fun=predictvals, xvar="ageYear", yvar="heightIn")
predvals
ggplot(predvals, aes(x = ageYear, y = heightIn, colour = sex))+
geom_point()
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point()
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point()+
geom_line(data = predvals)
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point()+
geom_line(method = "lm")
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point()+
geom_line(methods = "lm")
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point()+
geom_line(method = lm)
ggplot(heightweight, aes(x=ageYear, y=heightIn, colour=sex)) +
geom_point()+
geom_smooth(method = lm)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(se = F)+
annotate("text", label = "r^=0.42")
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "r^=0.42")
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "r^=0.42", x = 16.5, y = 52)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "r^2=0.42", x = 16.5, y = 52)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "r^2=0.42", x = 16.5, y = 52, parse = T)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "r^2==0.42", x = 16.5, y = 52, parse = T)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "beta^2==0.42", x = 16.5, y = 52, parse = T)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "alpha^2==0.42", x = 16.5, y = 52, parse = T)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "sigma^2==0.42", x = 16.5, y = 52, parse = T)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "r^2==0.42", x = 16.5, y = 52, parse = T)
ggplot(heightweight, aes(x = ageYear, y = heightIn))+
geom_point()+
geom_smooth(method = lm, se = F)+
annotate("text", label = "R^2==0.42", x = 16.5, y = 52, parse = T)
expression(r^2)
expression(r^2==42)
expression(r^2=42)
expression(r^2==42)
ggplot(faithful, aes(x = eruptions, y = waiting))+
geom_point()
ggplot(faithful, aes(x = eruptions, y = waiting))+
geom_point()+
geom_rug()
ggplot(faithful, aes(x = eruptions, y = waiting))+
geom_point()+
geom_rug(colour = "blue")
ggplot(faithful, aes(x = eruptions, y = waiting))+
geom_point()+
geom_rug(colour = "blue", position = "jitter")
ggplot(faithful, aes(x = eruptions, y = waiting))+
geom_point()+
geom_rug(colour = "blue", position = "jitter", size = .2)
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))))+
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality)))+
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()
countries
countries$Year==2009
countries[countries$Year==2009,]
countries[countries$Year==2009& countries$Name=="USA",]
countries[countries$Year==2009& countries$Name=="Usa",]
countries$Name==USA
countries$Name=="USA"
countries$Name
countries$Name %>% unique()
countries[countries$Year==2009& countries$Name=="United States",]
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7410.63, y = 6.6, label = "USA")
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7400, y = 6, label = "USA")
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7400, y = 6, label = "USA")+
geom_text()
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7400, y = 6, label = "USA")+
geom_text(aes(label = Name))
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7400, y = 6, label = "USA")+
geom_text(aes(label = Name), size = 2)
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7400, y = 6, label = "USA")+
geom_text(aes(label = Name), size = 2, vjust = 1)
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7400, y = 6, label = "USA")+
geom_text(aes(label = Name), size = 2, vjust = 1.5)
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7400, y = 6, label = "USA")+
geom_text(aes(label = Name, y = informatality +0.2), size = 2, vjust = 0)
ggplot(subset(countries,Year == 2009 & healthexp > 2000),
aes(x = healthexp, y = infmortality))+
geom_point()+
annotate("text", x = 7400, y = 6, label = "USA")+
geom_text(aes(label = Name, y = infmortality +0.2), size = 2, vjust = 0)
ggplot(cabbage_exp, aes(x = interaction(Date, Cultivar), y = Weight))+
geom_bar(stat = "identity")+
geom_text(aes(label=Weight), vjust=-0.2, colour="black")
cdat <- subset(countries, Year==2009 &
Name %in% c("Canada", "Ireland", "United Kingdom", "United States",
"New Zealand", "Iceland", "Japan", "Luxembourg",
"Netherlands", "Switzerland"))
ggplot(cdat, aes(x = healthexp, y = infmortality))+
geom_point(size = 2, fill = "yellow", colour = "black")
ggplot(cdat, aes(x = healthexp, y = infmortality))+
geom_point(shape = 21, size = 2, fill = "cornsilk")", colour = "black")
ggplot(cdat, aes(x = healthexp, y = infmortality))+
geom_point(shape = 21, size = 2, fill = "cornsilk", colour = "black")
ggplot(cdat, aes(x = healthexp, y = infmortality))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")
ggplot(cdat, aes(x = healthexp, y = infmortality))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")+
scale_fill_brewer()
ggplot(cdat, aes(x = healthexp, y = infmortality))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")+
scale_size_area(max = 15)
ggplot(cdat, aes(x = healthexp, y = infmortality))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")+
scale_size_area(max_size = 15)
ggplot(cdat, aes(x = healthexp, y = infmortality))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")+
scale_size_area(max_size=15)
ggplot(cdat, aes(x = healthexp, y = infmortality, size = GDP))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")+
scale_size_area(max_size=15)
ggplot(cdat, aes(x = healthexp, y = infmortality, size = GDP))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")
ggplot(cdat, aes(x = healthexp, y = infmortality, size = GDP))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")+
scale_size_area(max_size=15)
ggplot(cdat, aes(x = healthexp, y = infmortality, size = GDP))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")+
scale_size_area(max_size=15, guide = F)
ggplot(cdat, aes(x = healthexp, y = infmortality, size = GDP))+
geom_point(shape = 21, fill = "cornsilk", colour = "black")+
scale_size_area(max_size=15, guide = guide_legend())
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}
panel.hist <- function(x, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks
nB <- length(breaks)
y <- h$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="white", ...)
}
lower.panel = panel.smooth
pairs(c2009[,2:5], upper.panel = panel.cor,
pairs(c2009[,2:5], upper.panel = panel.cor,diag.panel = panel.hist,lower.panel = panel.smooth
pairs(c2009[,2:5], upper.panel = panel.cor,diag.panel = panel.hist,lower.panel = panel.smooth
()
()
pairs(c2009[,2:5], upper.panel = panel.cor,diag.panel = panel.hist,lower.panel = panel.smooth)
c2009 <- subset(countries, Year==2009,
select=c(Name, GDP, laborrate, healthexp, infmortality))
pairs(c2009[,2:5], upper.panel = panel.cor,diag.panel = panel.hist,lower.panel = panel.smooth)
pairs(c2009[,2:5], upper.panel = panel.cor,diag.panel = panel.hist,lower.panel = panel.lm)
panel.lm <- function (x, y, col = par("col"), bg = NA, pch = par("pch"),
cex = 1, col.smooth = "black", ...) {
points(x, y, pch = pch, col = col, bg = bg, cex = cex)
abline(stats::lm(y ~ x), col = col.smooth, ...)
}
pairs(c2009[,2:5], upper.panel = panel.cor,diag.panel = panel.hist,lower.panel = panel.lm)
help(pairs)
ggplot(faithful, aes(x = waiting))+
geom_histogram()
ggplot(faithful, aes(x = waiting))+
geom_histogram(binwidth = 50)
ggplot(faithful, aes(x = waiting))+
geom_histogram(binwidth = 10)
ggplot(faithful, aes(x = waiting))+
geom_histogram(binwidth = 20)
ggplot(faithful, aes(x = waiting))+
geom_histogram(binwidth = 40)
ggplot(faithful, aes(x = waiting))+
geom_histogram(binwidth = 10)
ggplot(faithful, aes(x = waiting))+
geom_histogram(binwidth = 5)
ggplot(faithful, aes(x = waiting))+
geom_histogram(binwidth = 1)
ggplot(faithful, aes(x = waiting))+
geom_histogram(bin= 30)
ggplot(faithful, aes(x = waiting))+
geom_histogram(bin= 40)
ggplot(faithful, aes(x = waiting))+
geom_histogram(stat_bin= 40)
ggplot(faithful, aes(x = waiting))+
geom_histogram(bins= 40)
w <- faithful$waiting
ggplot(NULL, aes(x=w)) + geom_histogram()
ggplot(faithful, aes(x = waiting))+
geom_histogram(binwidth = 5, fill = "white", colour = "black")
binsize <- diff(range(faithful$waiting))/15
ggplot(faithful, aes(x=waiting)) +
geom_histogram(binwidth=binsize, fill="white", colour="black")
range(faithful$waiting)
diff(range(faithful$waiting))
h <- ggplot(faithful, aes(x=waiting)) # Save the base object for reuse
h + geom_histogram(binwidth=8, fill="white", colour="black", origin=31)
h + geom_histogram(binwidth=8, fill="white", colour="black", boundary=31)
h + geom_histogram(binwidth=8, fill="white", colour="black", boundary=35)
h + geom_histogram(binwidth=8, fill="white", colour="black", boundary=c(35,70))
h + geom_histogram(binwidth=8, fill="white", colour="black",origin = 10)
names(birthwt)
ggplot(birthwt, aes(x = bwt))+geom_histogram(fill = "white", colour = "black")+
facet_grid(smoke~.)
ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
facet_grid(race ~ ., scales="free")
ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
facet_grid(race ~ .)
ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
facet_grid(race ~ ., scales="free")
ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
facet_grid(race ~ .)
, scales="free"
ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
facet_grid(race ~ ., scales="free")
ggplot(birthwt, aes(x = bwt, fill = smoke))+geom_histogram(alpha = .4)
ggplot(birthwt, aes(x = bwt, fill = smoke))+geom_histogram(position = "identity",alpha = .4)
ggplot(birthwt, aes(x=bwt, fill=smoke)) +
geom_histogram(position="identity", alpha=0.4)
ggplot(birthwt, aes(x = bwt, fill = factor(smoke)))+geom_histogram(position = "identity",alpha = .4)
